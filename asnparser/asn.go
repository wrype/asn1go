// Code generated by goyacc -o asnparser/asn.go -p ParsedGrammar asnparser/asn.y. DO NOT EDIT.

//line asnparser/asn.y:2
package asnparser

import __yyfmt__ "fmt"

//line asnparser/asn.y:2

import (
	"encoding/json"
	"fmt"
)

//line asnparser/asn.y:12
type ParsedGrammarSymType struct {
	yys int
	str string //匹配到的字符
	//临时变量
	String     String
	Int64      Int64
	ModuleList ModuleList
	Module     Module
	Member     Member
	MemberList MemberList
	Constraint Constraint
	Marker     Marker
	ImportList ImportList
	Import     Import
	Tag        Tag
}

const ABSENT = 57346
const ABSTRACT_SYNTAX = 57347
const ALL = 57348
const ANY = 57349
const APPLICATION = 57350
const AUTOMATIC = 57351
const BEGIN = 57352
const BIT = 57353
const BMPString = 57354
const BOOLEAN = 57355
const BY = 57356
const CHARACTER = 57357
const CHOICE = 57358
const CLASS = 57359
const COMPONENT = 57360
const COMPONENTS = 57361
const CONSTRAINED = 57362
const CONTAINING = 57363
const DEFAULT = 57364
const DEFINITIONS = 57365
const DEFINED = 57366
const EMBEDDED = 57367
const ENCODED = 57368
const ENCODING_CONTROL = 57369
const END = 57370
const ENUMERATED = 57371
const EXPLICIT = 57372
const EXPORTS = 57373
const EXTENSIBILITY = 57374
const EXTERNAL = 57375
const FALSE = 57376
const FROM = 57377
const GeneralizedTime = 57378
const GeneralString = 57379
const GraphicString = 57380
const IA5String = 57381
const IDENTIFIER = 57382
const IMPLICIT = 57383
const IMPLIED = 57384
const IMPORTS = 57385
const INCLUDES = 57386
const INSTANCE = 57387
const INSTRUCTIONS = 57388
const INTEGER = 57389
const ISO646String = 57390
const MAX = 57391
const MIN = 57392
const MINUS_INFINITY = 57393
const NULL = 57394
const NumericString = 57395
const OBJECT = 57396
const ObjectDescriptor = 57397
const OCTET = 57398
const OF = 57399
const OPTIONAL = 57400
const PATTERN = 57401
const PDV = 57402
const PLUS_INFINITY = 57403
const PRESENT = 57404
const PrintableString = 57405
const PRIVATE = 57406
const REAL = 57407
const RELATIVE_OID = 57408
const SEQUENCE = 57409
const SET = 57410
const SIZE = 57411
const STRING = 57412
const SYNTAX = 57413
const T61String = 57414
const TAGS = 57415
const TeletexString = 57416
const TRUE = 57417
const TYPE_IDENTIFIER = 57418
const UNIQUE = 57419
const UNIVERSAL = 57420
const UniversalString = 57421
const UTCTime = 57422
const UTF8String = 57423
const VideotexString = 57424
const VisibleString = 57425
const WITH = 57426
const UTF8_BOM = 57427
const ASSIGNMENT = 57428
const ELLIPSISS = 57429
const ELLIPSIS = 57430
const Number = 57431
const Identifier = 57432

var ParsedGrammarToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"ABSENT",
	"ABSTRACT_SYNTAX",
	"ALL",
	"ANY",
	"APPLICATION",
	"AUTOMATIC",
	"BEGIN",
	"BIT",
	"BMPString",
	"BOOLEAN",
	"BY",
	"CHARACTER",
	"CHOICE",
	"CLASS",
	"COMPONENT",
	"COMPONENTS",
	"CONSTRAINED",
	"CONTAINING",
	"DEFAULT",
	"DEFINITIONS",
	"DEFINED",
	"EMBEDDED",
	"ENCODED",
	"ENCODING_CONTROL",
	"END",
	"ENUMERATED",
	"EXPLICIT",
	"EXPORTS",
	"EXTENSIBILITY",
	"EXTERNAL",
	"FALSE",
	"FROM",
	"GeneralizedTime",
	"GeneralString",
	"GraphicString",
	"IA5String",
	"IDENTIFIER",
	"IMPLICIT",
	"IMPLIED",
	"IMPORTS",
	"INCLUDES",
	"INSTANCE",
	"INSTRUCTIONS",
	"INTEGER",
	"ISO646String",
	"MAX",
	"MIN",
	"MINUS_INFINITY",
	"NULL",
	"NumericString",
	"OBJECT",
	"ObjectDescriptor",
	"OCTET",
	"OF",
	"OPTIONAL",
	"PATTERN",
	"PDV",
	"PLUS_INFINITY",
	"PRESENT",
	"PrintableString",
	"PRIVATE",
	"REAL",
	"RELATIVE_OID",
	"SEQUENCE",
	"SET",
	"SIZE",
	"STRING",
	"SYNTAX",
	"T61String",
	"TAGS",
	"TeletexString",
	"TRUE",
	"TYPE_IDENTIFIER",
	"UNIQUE",
	"UNIVERSAL",
	"UniversalString",
	"UTCTime",
	"UTF8String",
	"VideotexString",
	"VisibleString",
	"WITH",
	"UTF8_BOM",
	"ASSIGNMENT",
	"'{'",
	"'}'",
	"'['",
	"']'",
	"'('",
	"')'",
	"','",
	"';'",
	"ELLIPSISS",
	"ELLIPSIS",
	"Number",
	"Identifier",
}

var ParsedGrammarStatenames = [...]string{}

const ParsedGrammarEofCode = 1
const ParsedGrammarErrCode = 2
const ParsedGrammarInitialStackSize = 16

//line asnparser/asn.y:860

//指针类型都要复制一份

//复制一个Constraint
func CopyConstraint(c Constraint) *Constraint {
	if c.Type == "" {
		return nil
	}
	var copy Constraint
	buf, _ := json.Marshal(c)
	json.Unmarshal(buf, &copy)
	return &copy
}

//复制一个Marker
func CopyMarker(c Marker) *Marker {
	if c.Flags == "" {
		return nil
	}
	var copy Marker
	buf, _ := json.Marshal(c)
	json.Unmarshal(buf, &copy)
	return &copy
}

//复制一个 Tag
func CopyTag(c Tag) *Tag {
	if c.TagMode == "" {
		return nil
	}
	var copy Tag
	buf, _ := json.Marshal(c)
	json.Unmarshal(buf, &copy)
	return &copy
}

//line yacctab:1
var ParsedGrammarExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 36,
	86, 55,
	-2, 44,
}

const ParsedGrammarPrivate = 57344

const ParsedGrammarLast = 253

var ParsedGrammarAct = [...]int{
	118, 164, 184, 125, 140, 58, 138, 134, 123, 129,
	63, 59, 37, 171, 60, 126, 66, 142, 139, 126,
	126, 120, 130, 124, 14, 62, 67, 2, 185, 120,
	56, 165, 135, 102, 56, 5, 119, 38, 39, 40,
	5, 197, 209, 31, 193, 12, 148, 15, 41, 121,
	186, 188, 142, 42, 187, 50, 13, 204, 168, 167,
	117, 103, 148, 43, 210, 199, 81, 37, 82, 70,
	90, 76, 44, 198, 45, 205, 206, 189, 161, 46,
	89, 47, 48, 49, 80, 194, 153, 211, 88, 196,
	195, 92, 38, 39, 40, 180, 157, 208, 36, 149,
	181, 158, 79, 41, 150, 207, 201, 83, 42, 86,
	50, 85, 131, 16, 200, 141, 191, 190, 43, 145,
	84, 87, 77, 182, 108, 162, 159, 44, 106, 45,
	151, 147, 106, 144, 46, 91, 47, 48, 49, 66,
	160, 152, 154, 156, 166, 155, 143, 111, 37, 110,
	107, 71, 57, 17, 104, 100, 21, 131, 20, 169,
	19, 116, 175, 170, 177, 141, 176, 179, 178, 174,
	113, 112, 34, 38, 39, 40, 115, 173, 132, 23,
	55, 97, 22, 192, 41, 30, 114, 69, 51, 42,
	8, 50, 96, 28, 146, 11, 24, 203, 202, 43,
	4, 1, 3, 94, 7, 6, 18, 7, 44, 78,
	45, 101, 183, 105, 53, 46, 128, 47, 48, 49,
	127, 52, 122, 163, 137, 99, 136, 133, 75, 35,
	95, 98, 109, 65, 36, 68, 93, 64, 53, 172,
	74, 73, 72, 61, 32, 33, 54, 29, 27, 26,
	25, 10, 9,
}

var ParsedGrammarPact = [...]int{
	-58, -1000, -63, -63, -1000, 167, -63, -1000, 15, 67,
	15, -1000, 87, 85, 83, 140, 133, 186, -1000, -1000,
	-1000, -1000, -1000, -1000, 0, 160, -1000, 136, 136, -1000,
	-1000, -64, -1000, -1000, -1000, 66, -73, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 136, -1000, -68, -1000, 152, 50, 65, -1000,
	-1000, -1000, -1000, 55, -1000, 151, 147, -1000, -1000, -65,
	-1000, -36, -1000, 41, -1000, -1000, 63, 37, -1000, 62,
	60, 101, -1000, -1000, -1000, 100, 146, -1000, -1000, 116,
	91, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -37, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -48, -75, -76, 121,
	-66, -80, 59, -1000, -1000, -1000, -1000, 43, 27, 175,
	40, -34, 11, -1000, -73, -1000, -1000, 53, -7, -1000,
	-73, -1000, 50, 8, -1000, 35, 52, -15, -1000, 34,
	-1000, -1000, -1000, -67, -1000, -1000, 57, -38, -39, -1000,
	-75, -1000, -1000, -76, 119, 119, -73, -1000, -66, -45,
	-1000, -80, -45, 7, -1000, 32, -70, -42, -16, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 25, -1000, 24,
	-1000, -67, -53, -3, -1000, -2, -1000, -56, -22, -30,
	-1000, -1000, -1000, 22, 14, -70, -40, -17, 13, -1000,
	-1000, -1000, -1000, 5, -50, -1000, -31, -1000, -1000, -1000,
	-5, -1000,
}

var ParsedGrammarPgo = [...]int{
	0, 200, 202, 252, 251, 195, 250, 249, 193, 248,
	247, 246, 180, 185, 245, 244, 11, 243, 242, 241,
	240, 13, 239, 10, 237, 233, 231, 230, 229, 229,
	228, 227, 7, 4, 226, 224, 6, 223, 1, 222,
	8, 14, 5, 220, 216, 9, 154, 213, 0, 212,
	2, 209, 203, 172, 3, 201,
}

var ParsedGrammarR1 = [...]int{
	0, 55, 55, 2, 2, 1, 3, 3, 4, 4,
	5, 5, 5, 5, 5, 6, 6, 7, 7, 8,
	8, 9, 9, 10, 11, 11, 11, 12, 13, 13,
	13, 14, 15, 16, 17, 18, 19, 20, 20, 20,
	20, 21, 21, 22, 23, 23, 24, 25, 26, 26,
	26, 26, 27, 27, 27, 28, 29, 29, 30, 30,
	30, 30, 31, 31, 32, 33, 34, 35, 35, 36,
	36, 36, 36, 37, 37, 38, 39, 39, 40, 40,
	41, 42, 42, 43, 43, 44, 44, 45, 45, 45,
	46, 46, 47, 47, 48, 48, 48, 48, 48, 48,
	49, 49, 50, 50, 54, 51, 51, 51, 51, 51,
	51, 51, 51, 51, 51, 51, 51, 51, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53,
	53, 53, 52, 52, 52,
}

var ParsedGrammarR2 = [...]int{
	0, 2, 1, 1, 2, 7, 0, 1, 1, 2,
	2, 2, 2, 2, 2, 0, 1, 2, 1, 1,
	2, 0, 1, 3, 1, 2, 0, 3, 1, 1,
	1, 4, 3, 1, 2, 2, 1, 1, 4, 4,
	5, 0, 1, 1, 0, 1, 2, 4, 0, 1,
	1, 1, 0, 1, 1, 1, 0, 1, 1, 4,
	4, 5, 1, 3, 4, 1, 1, 1, 3, 1,
	4, 1, 1, 1, 3, 4, 1, 3, 2, 1,
	1, 1, 1, 0, 1, 1, 3, 3, 3, 1,
	0, 1, 3, 7, 4, 6, 6, 8, 5, 3,
	1, 3, 4, 4, 1, 1, 1, 1, 2, 2,
	1, 1, 2, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2,
}

var ParsedGrammarChk = [...]int{
	-1000, -55, 85, -2, -1, 98, -2, -1, 23, -3,
	-4, -5, 30, 41, 9, 32, 98, 86, -5, 73,
	73, 73, 42, 46, 10, -6, -7, -9, -8, -10,
	-13, 43, -15, -14, -53, -28, 98, 12, 37, 38,
	39, 48, 53, 63, 72, 74, 79, 81, 82, 83,
	55, 28, -8, -13, -11, -12, 98, 86, -42, -16,
	-41, -17, 98, -23, -24, -25, 89, 94, -12, 35,
	-16, 86, -18, -19, -20, -30, 16, 67, -51, 47,
	29, 11, 13, 52, 65, 56, 54, 66, 33, 25,
	15, 80, 36, -53, -52, -27, 41, 30, -26, 78,
	8, 64, 98, 97, -46, -47, 91, 87, 87, -46,
	87, 87, 70, 70, 40, 60, 70, 97, -48, 84,
	69, 97, -39, -40, 98, -54, 95, -43, -44, -45,
	98, -54, 57, -31, -32, 98, -34, -35, -36, 98,
	-33, -54, 97, 87, 90, 92, 19, 91, 96, 88,
	93, -42, 88, 93, -16, -41, -23, 88, 93, 91,
	88, 93, 91, -37, -38, 98, 87, 97, 97, -40,
	-45, -21, -22, 58, -21, -42, -32, -33, -36, -33,
	88, 93, 91, -49, -50, 98, 92, 96, 93, 93,
	92, 92, -38, 97, 88, 93, 91, 97, 95, 95,
	92, 92, -50, -48, 97, 92, 93, 92, 92, 92,
	95, 92,
}

var ParsedGrammarDef = [...]int{
	0, -2, 0, 2, 3, 0, 1, 4, 6, 0,
	7, 8, 0, 0, 0, 0, 0, 0, 9, 10,
	11, 12, 13, 14, 15, 0, 16, 0, 18, 22,
	19, 26, 28, 29, 30, 0, -2, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
	131, 5, 17, 20, 0, 24, 0, 44, 0, 81,
	82, 33, 80, 0, 45, 52, 48, 23, 25, 0,
	32, 0, 34, 90, 36, 37, 0, 90, 58, 132,
	133, 0, 105, 106, 107, 0, 0, 110, 111, 0,
	0, 114, 115, 116, 117, 46, 53, 54, 0, 49,
	50, 51, 27, 31, 35, 91, 0, 0, 83, 0,
	0, 0, 134, 108, 109, 112, 113, 0, 0, 0,
	0, 0, 0, 76, 44, 79, 104, 0, 84, 85,
	44, 89, 44, 0, 62, 0, 0, 66, 67, 69,
	71, 72, 65, 0, 47, 92, 0, 0, 0, 38,
	0, 78, 39, 0, 41, 41, 44, 59, 0, 0,
	60, 0, 0, 0, 73, 0, 0, 0, 99, 77,
	86, 87, 42, 43, 88, 40, 63, 0, 68, 0,
	61, 0, 0, 0, 100, 0, 94, 0, 0, 0,
	64, 70, 74, 0, 0, 0, 0, 0, 0, 98,
	75, 93, 101, 0, 0, 95, 0, 96, 102, 103,
	0, 97,
}

var ParsedGrammarTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	91, 92, 3, 3, 93, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 94,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 89, 3, 90, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 3, 88,
}

var ParsedGrammarTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 95, 96, 97, 98,
}

var ParsedGrammarTok3 = [...]int{
	0,
}

var ParsedGrammarErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	ParsedGrammarDebug        = 0
	ParsedGrammarErrorVerbose = false
)

type ParsedGrammarLexer interface {
	Lex(lval *ParsedGrammarSymType) int
	Error(s string)
}

type ParsedGrammarParser interface {
	Parse(ParsedGrammarLexer) int
	Lookahead() int
}

type ParsedGrammarParserImpl struct {
	lval  ParsedGrammarSymType
	stack [ParsedGrammarInitialStackSize]ParsedGrammarSymType
	char  int
}

func (p *ParsedGrammarParserImpl) Lookahead() int {
	return p.char
}

func ParsedGrammarNewParser() ParsedGrammarParser {
	return &ParsedGrammarParserImpl{}
}

const ParsedGrammarFlag = -1000

func ParsedGrammarTokname(c int) string {
	if c >= 1 && c-1 < len(ParsedGrammarToknames) {
		if ParsedGrammarToknames[c-1] != "" {
			return ParsedGrammarToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func ParsedGrammarStatname(s int) string {
	if s >= 0 && s < len(ParsedGrammarStatenames) {
		if ParsedGrammarStatenames[s] != "" {
			return ParsedGrammarStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func ParsedGrammarErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !ParsedGrammarErrorVerbose {
		return "syntax error"
	}

	for _, e := range ParsedGrammarErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + ParsedGrammarTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := ParsedGrammarPact[state]
	for tok := TOKSTART; tok-1 < len(ParsedGrammarToknames); tok++ {
		if n := base + tok; n >= 0 && n < ParsedGrammarLast && ParsedGrammarChk[ParsedGrammarAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if ParsedGrammarDef[state] == -2 {
		i := 0
		for ParsedGrammarExca[i] != -1 || ParsedGrammarExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; ParsedGrammarExca[i] >= 0; i += 2 {
			tok := ParsedGrammarExca[i]
			if tok < TOKSTART || ParsedGrammarExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if ParsedGrammarExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += ParsedGrammarTokname(tok)
	}
	return res
}

func ParsedGrammarlex1(lex ParsedGrammarLexer, lval *ParsedGrammarSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = ParsedGrammarTok1[0]
		goto out
	}
	if char < len(ParsedGrammarTok1) {
		token = ParsedGrammarTok1[char]
		goto out
	}
	if char >= ParsedGrammarPrivate {
		if char < ParsedGrammarPrivate+len(ParsedGrammarTok2) {
			token = ParsedGrammarTok2[char-ParsedGrammarPrivate]
			goto out
		}
	}
	for i := 0; i < len(ParsedGrammarTok3); i += 2 {
		token = ParsedGrammarTok3[i+0]
		if token == char {
			token = ParsedGrammarTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = ParsedGrammarTok2[1] /* unknown char */
	}
	if ParsedGrammarDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", ParsedGrammarTokname(token), uint(char))
	}
	return char, token
}

func ParsedGrammarParse(ParsedGrammarlex ParsedGrammarLexer) int {
	return ParsedGrammarNewParser().Parse(ParsedGrammarlex)
}

func (ParsedGrammarrcvr *ParsedGrammarParserImpl) Parse(ParsedGrammarlex ParsedGrammarLexer) int {
	var ParsedGrammarn int
	var ParsedGrammarVAL ParsedGrammarSymType
	var ParsedGrammarDollar []ParsedGrammarSymType
	_ = ParsedGrammarDollar // silence set and not used
	ParsedGrammarS := ParsedGrammarrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	ParsedGrammarstate := 0
	ParsedGrammarrcvr.char = -1
	ParsedGrammartoken := -1 // ParsedGrammarrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		ParsedGrammarstate = -1
		ParsedGrammarrcvr.char = -1
		ParsedGrammartoken = -1
	}()
	ParsedGrammarp := -1
	goto ParsedGrammarstack

ret0:
	return 0

ret1:
	return 1

ParsedGrammarstack:
	/* put a state and value onto the stack */
	if ParsedGrammarDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", ParsedGrammarTokname(ParsedGrammartoken), ParsedGrammarStatname(ParsedGrammarstate))
	}

	ParsedGrammarp++
	if ParsedGrammarp >= len(ParsedGrammarS) {
		nyys := make([]ParsedGrammarSymType, len(ParsedGrammarS)*2)
		copy(nyys, ParsedGrammarS)
		ParsedGrammarS = nyys
	}
	ParsedGrammarS[ParsedGrammarp] = ParsedGrammarVAL
	ParsedGrammarS[ParsedGrammarp].yys = ParsedGrammarstate

ParsedGrammarnewstate:
	ParsedGrammarn = ParsedGrammarPact[ParsedGrammarstate]
	if ParsedGrammarn <= ParsedGrammarFlag {
		goto ParsedGrammardefault /* simple state */
	}
	if ParsedGrammarrcvr.char < 0 {
		ParsedGrammarrcvr.char, ParsedGrammartoken = ParsedGrammarlex1(ParsedGrammarlex, &ParsedGrammarrcvr.lval)
	}
	ParsedGrammarn += ParsedGrammartoken
	if ParsedGrammarn < 0 || ParsedGrammarn >= ParsedGrammarLast {
		goto ParsedGrammardefault
	}
	ParsedGrammarn = ParsedGrammarAct[ParsedGrammarn]
	if ParsedGrammarChk[ParsedGrammarn] == ParsedGrammartoken { /* valid shift */
		ParsedGrammarrcvr.char = -1
		ParsedGrammartoken = -1
		ParsedGrammarVAL = ParsedGrammarrcvr.lval
		ParsedGrammarstate = ParsedGrammarn
		if Errflag > 0 {
			Errflag--
		}
		goto ParsedGrammarstack
	}

ParsedGrammardefault:
	/* default state action */
	ParsedGrammarn = ParsedGrammarDef[ParsedGrammarstate]
	if ParsedGrammarn == -2 {
		if ParsedGrammarrcvr.char < 0 {
			ParsedGrammarrcvr.char, ParsedGrammartoken = ParsedGrammarlex1(ParsedGrammarlex, &ParsedGrammarrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if ParsedGrammarExca[xi+0] == -1 && ParsedGrammarExca[xi+1] == ParsedGrammarstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			ParsedGrammarn = ParsedGrammarExca[xi+0]
			if ParsedGrammarn < 0 || ParsedGrammarn == ParsedGrammartoken {
				break
			}
		}
		ParsedGrammarn = ParsedGrammarExca[xi+1]
		if ParsedGrammarn < 0 {
			goto ret0
		}
	}
	if ParsedGrammarn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			ParsedGrammarlex.Error(ParsedGrammarErrorMessage(ParsedGrammarstate, ParsedGrammartoken))
			Nerrs++
			if ParsedGrammarDebug >= 1 {
				__yyfmt__.Printf("%s", ParsedGrammarStatname(ParsedGrammarstate))
				__yyfmt__.Printf(" saw %s\n", ParsedGrammarTokname(ParsedGrammartoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for ParsedGrammarp >= 0 {
				ParsedGrammarn = ParsedGrammarPact[ParsedGrammarS[ParsedGrammarp].yys] + ParsedGrammarErrCode
				if ParsedGrammarn >= 0 && ParsedGrammarn < ParsedGrammarLast {
					ParsedGrammarstate = ParsedGrammarAct[ParsedGrammarn] /* simulate a shift of "error" */
					if ParsedGrammarChk[ParsedGrammarstate] == ParsedGrammarErrCode {
						goto ParsedGrammarstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if ParsedGrammarDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", ParsedGrammarS[ParsedGrammarp].yys)
				}
				ParsedGrammarp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if ParsedGrammarDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", ParsedGrammarTokname(ParsedGrammartoken))
			}
			if ParsedGrammartoken == ParsedGrammarEofCode {
				goto ret1
			}
			ParsedGrammarrcvr.char = -1
			ParsedGrammartoken = -1
			goto ParsedGrammarnewstate /* try again in the same state */
		}
	}

	/* reduction by production ParsedGrammarn */
	if ParsedGrammarDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", ParsedGrammarn, ParsedGrammarStatname(ParsedGrammarstate))
	}

	ParsedGrammarnt := ParsedGrammarn
	ParsedGrammarpt := ParsedGrammarp
	_ = ParsedGrammarpt // guard against "declared and not used"

	ParsedGrammarp -= ParsedGrammarR2[ParsedGrammarn]
	// ParsedGrammarp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if ParsedGrammarp+1 >= len(ParsedGrammarS) {
		nyys := make([]ParsedGrammarSymType, len(ParsedGrammarS)*2)
		copy(nyys, ParsedGrammarS)
		ParsedGrammarS = nyys
	}
	ParsedGrammarVAL = ParsedGrammarS[ParsedGrammarp+1]

	/* consult goto table to find next state */
	ParsedGrammarn = ParsedGrammarR1[ParsedGrammarn]
	ParsedGrammarg := ParsedGrammarPgo[ParsedGrammarn]
	ParsedGrammarj := ParsedGrammarg + ParsedGrammarS[ParsedGrammarp].yys + 1

	if ParsedGrammarj >= ParsedGrammarLast {
		ParsedGrammarstate = ParsedGrammarAct[ParsedGrammarg]
	} else {
		ParsedGrammarstate = ParsedGrammarAct[ParsedGrammarj]
		if ParsedGrammarChk[ParsedGrammarstate] != -ParsedGrammarn {
			ParsedGrammarstate = ParsedGrammarAct[ParsedGrammarg]
		}
	}
	// dummy call; replaced with literal code
	switch ParsedGrammarnt {

	case 1:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:183
		{
			ParsedGrammarlex.(*AsnLexer).result = &ParsedGrammarDollar[2].ModuleList
		}
	case 2:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:186
		{
			ParsedGrammarlex.(*AsnLexer).result = &ParsedGrammarDollar[1].ModuleList
		}
	case 3:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:192
		{
			ParsedGrammarVAL.ModuleList = append(make(ModuleList, 0), ParsedGrammarDollar[1].Module)
		}
	case 4:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:195
		{
			ParsedGrammarVAL.ModuleList = append(ParsedGrammarDollar[1].ModuleList, ParsedGrammarDollar[2].Module)
		}
	case 5:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-7 : ParsedGrammarpt+1]
//line asnparser/asn.y:213
		{
			ParsedGrammarVAL.Module = Module{ModuleName: ParsedGrammarDollar[1].String, Flags: ParsedGrammarDollar[3].String, Members: ParsedGrammarDollar[6].MemberList}
		}
	case 6:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:219
		{
			ParsedGrammarVAL.String = "MSF_NOFLAGS"
		}
	case 7:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:220
		{
			ParsedGrammarVAL.String = ParsedGrammarDollar[1].String
		}
	case 8:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:229
		{
			ParsedGrammarVAL.String = ParsedGrammarDollar[1].String
		}
	case 9:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:232
		{
			ParsedGrammarVAL.String = ParsedGrammarDollar[1].String + "," + ParsedGrammarDollar[2].String
		}
	case 10:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:241
		{
			ParsedGrammarVAL.String = "MSF_EXPLICIT_TAGS"
		}
	case 11:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:244
		{
			ParsedGrammarVAL.String = "MSF_IMPLICIT_TAGS"
		}
	case 12:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:247
		{
			ParsedGrammarVAL.String = "MSF_AUTOMATIC_TAGS"
		}
	case 13:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:250
		{
			ParsedGrammarVAL.String = "MSF_EXTENSIBILITY_IMPLIED"
		}
	case 14:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:254
		{
			/* X.680Amd1 specifies TAG and XER */
			if ParsedGrammarDollar[1].String == "TAG" {
				ParsedGrammarVAL.String = "MSF_TAG_INSTRUCTIONS"
			} else if ParsedGrammarDollar[1].String == "XER" {
				ParsedGrammarVAL.String = "MSF_XER_INSTRUCTIONS"
			} else {
				//console.error(`WARNING: $1 INSTRUCTIONS Unrecognized encoding reference`);
				ParsedGrammarVAL.String = "MSF_unk_INSTRUCTIONS"
			}
		}
	case 15:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:267
		{
			ParsedGrammarVAL.MemberList = []Member{}
		}
	case 17:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:273
		{
			if len(ParsedGrammarDollar[1].ImportList) != 0 {
				fmt.Println("不支持 Import !")
			}
			ParsedGrammarVAL.MemberList = ParsedGrammarDollar[2].MemberList
		}
	case 18:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:279
		{
			ParsedGrammarVAL.MemberList = ParsedGrammarDollar[1].MemberList
		}
	case 19:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:283
		{
			ParsedGrammarVAL.MemberList = append(make([]Member, 0), ParsedGrammarDollar[1].Member)
		}
	case 20:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:286
		{
			ParsedGrammarVAL.MemberList = append(ParsedGrammarDollar[1].MemberList, ParsedGrammarDollar[2].Member)
		}
	case 21:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:292
		{
			ParsedGrammarVAL.ImportList = []Import{}
		}
	case 22:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:292
		{
			ParsedGrammarVAL.ImportList = ParsedGrammarDollar[1].ImportList
		}
	case 23:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:295
		{
			ParsedGrammarVAL.ImportList = ParsedGrammarDollar[2].ImportList
		}
	case 24:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:301
		{
			ParsedGrammarVAL.ImportList = append(make([]Import, 0), ParsedGrammarDollar[1].Import)
		}
	case 25:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:304
		{
			ParsedGrammarVAL.ImportList = append(ParsedGrammarDollar[1].ImportList, ParsedGrammarDollar[2].Import)
		}
	case 26:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:307
		{
			ParsedGrammarVAL.ImportList = []Import{}
		}
	case 27:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:313
		{
			ParsedGrammarVAL.Import = Import{ModuleName: ParsedGrammarDollar[1].String, Form: ParsedGrammarDollar[3].String}
		}
	case 28:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:322
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 29:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:325
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 30:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:354
		{
			panic("Attempt to redefine a standard basic string type, please comment out or remove this type redefinition.")
		}
	case 31:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:360
		{
			ParsedGrammarVAL.Member = Member{
				Identifier:  ParsedGrammarDollar[1].String,
				MetaType:    "AMT_VALUE_ASSIGMENT",
				ExprType:    ParsedGrammarDollar[2].Member.ExprType,
				Constraints: &Constraint{Type: "AMT_VALUE", Value: ParsedGrammarDollar[4].Int64},
				Members:     append(make([]Member, 0), ParsedGrammarDollar[2].Member),
			}
		}
	case 32:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:381
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[3].Member
			ParsedGrammarVAL.Member.Identifier = ParsedGrammarDollar[1].String
		}
	case 33:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:414
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 34:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:417
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[2].Member
			//$$.Tag = CopyTag($1)
		}
	case 35:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:425
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
			if ParsedGrammarVAL.Member.Constraints == nil || ParsedGrammarVAL.Member.Constraints.Type == "" {
				ParsedGrammarVAL.Member.Constraints = CopyConstraint(ParsedGrammarDollar[2].Constraint)
			}
		}
	case 36:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:434
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 37:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:443
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 38:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:444
		{
			ParsedGrammarVAL.Member = Member{Members: ParsedGrammarDollar[3].MemberList, ExprType: "CHOICE", MetaType: "AMT_TYPE"}
		}
	case 39:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:447
		{
			ParsedGrammarVAL.Member = Member{Members: ParsedGrammarDollar[3].MemberList, ExprType: "SEQUENCE", MetaType: "AMT_TYPE"}
		}
	case 40:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-5 : ParsedGrammarpt+1]
//line asnparser/asn.y:455
		{
			ParsedGrammarVAL.Member = Member{
				Identifier: "",
				Members:    append(make([]Member, 0), ParsedGrammarDollar[5].Member),
				ExprType:   "SEQUENCE_OF",
				MetaType:   "AMT_TYPE",
			}
			//$$.Tag = CopyTag($4)
			ParsedGrammarVAL.Member.Constraints = CopyConstraint(ParsedGrammarDollar[2].Constraint)
		}
	case 41:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:489
		{
			ParsedGrammarVAL.Marker = Marker{Flags: "EM_NOMARK"}
		}
	case 42:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:490
		{
			ParsedGrammarVAL.Marker = ParsedGrammarDollar[1].Marker
		}
	case 43:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:494
		{
			ParsedGrammarVAL.Marker = Marker{Flags: "EM_OPTIONAL"}
		}
	case 44:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:511
		{
			ParsedGrammarVAL.Tag = Tag{TagMode: "TM_DEFAULT", TagClass: "TC_CONTEXT_SPECIFIC", TagValue: 0}
		}
	case 45:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:512
		{
			ParsedGrammarVAL.Tag = ParsedGrammarDollar[1].Tag
		}
	case 46:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:516
		{
			ParsedGrammarVAL.Tag = ParsedGrammarDollar[1].Tag
			ParsedGrammarVAL.Tag.TagMode = ParsedGrammarDollar[2].String
		}
	case 47:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:523
		{
			ParsedGrammarVAL.Tag = Tag{TagMode: "TM_DEFAULT", TagClass: ParsedGrammarDollar[2].String, TagValue: ParsedGrammarDollar[3].Int64}
		}
	case 48:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:529
		{
			ParsedGrammarVAL.String = "TC_CONTEXT_SPECIFIC"
		}
	case 49:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:530
		{
			ParsedGrammarVAL.String = "TC_UNIVERSAL"
		}
	case 50:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:531
		{
			ParsedGrammarVAL.String = "TC_APPLICATION"
		}
	case 51:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:532
		{
			ParsedGrammarVAL.String = "TC_PRIVATE"
		}
	case 52:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:536
		{
			ParsedGrammarVAL.String = "TM_DEFAULT"
		}
	case 53:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:537
		{
			ParsedGrammarVAL.String = "TM_IMPLICIT"
		}
	case 54:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:538
		{
			ParsedGrammarVAL.String = "TM_EXPLICIT"
		}
	case 55:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:542
		{
			ParsedGrammarVAL.String = ParsedGrammarDollar[1].String
		}
	case 56:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:546
		{
			ParsedGrammarVAL.String = ""
		}
	case 57:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:547
		{
			ParsedGrammarVAL.String = ParsedGrammarDollar[1].String
		}
	case 58:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:557
		{
			ParsedGrammarVAL.Member = Member{ExprType: ParsedGrammarDollar[1].String, MetaType: "AMT_TYPE"}
		}
	case 59:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:560
		{
			ParsedGrammarVAL.Member = Member{ExprType: "INTEGER", MetaType: "AMT_TYPE", Members: ParsedGrammarDollar[3].MemberList}
		}
	case 60:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:563
		{
			ParsedGrammarVAL.Member = Member{ExprType: "ENUMERATED", MetaType: "AMT_TYPE", Members: ParsedGrammarDollar[3].MemberList}
		}
	case 61:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-5 : ParsedGrammarpt+1]
//line asnparser/asn.y:566
		{
			ParsedGrammarVAL.Member = Member{ExprType: "BIT_STRING", MetaType: "AMT_TYPE", Members: ParsedGrammarDollar[4].MemberList}
		}
	case 62:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:575
		{
			ParsedGrammarVAL.MemberList = append(make([]Member, 0), ParsedGrammarDollar[1].Member)
		}
	case 63:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:578
		{
			ParsedGrammarVAL.MemberList = append(ParsedGrammarDollar[1].MemberList, ParsedGrammarDollar[3].Member)
		}
	case 64:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:584
		{
			ParsedGrammarVAL.Member = Member{Identifier: ParsedGrammarDollar[1].String, ExprType: "A1TC_UNIVERVAL", MetaType: "AMT_VALUE", Value: ParsedGrammarDollar[3].Int64}
		}
	case 65:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:590
		{
			ParsedGrammarVAL.Int64 = ParsedGrammarDollar[1].Int64
		}
	case 66:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:595
		{
			for i, v := range ParsedGrammarDollar[1].MemberList {
				if v.Value == -999 {
					ParsedGrammarDollar[1].MemberList[i].Value = Int64(i)
				}
			}
			ParsedGrammarVAL.MemberList = ParsedGrammarDollar[1].MemberList
		}
	case 67:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:606
		{
			ParsedGrammarVAL.MemberList = append(make([]Member, 0), ParsedGrammarDollar[1].Member)
		}
	case 68:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:609
		{
			ParsedGrammarVAL.MemberList = append(ParsedGrammarDollar[1].MemberList, ParsedGrammarDollar[3].Member)
		}
	case 69:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:615
		{
			ParsedGrammarVAL.Member = Member{Identifier: ParsedGrammarDollar[1].String, ExprType: "A1TC_UNIVERVAL", MetaType: "AMT_VALUE", Value: -999}
		}
	case 70:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:618
		{
			ParsedGrammarVAL.Member = Member{Identifier: ParsedGrammarDollar[1].String, ExprType: "A1TC_UNIVERVAL", MetaType: "AMT_VALUE", Value: ParsedGrammarDollar[3].Int64}
		}
	case 71:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:621
		{
			ParsedGrammarVAL.Member = Member{Identifier: "", ExprType: "A1TC_UNIVERVAL", MetaType: "AMT_VALUE", Value: ParsedGrammarDollar[1].Int64}
		}
	case 72:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:624
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 73:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:629
		{
			ParsedGrammarVAL.MemberList = append(make([]Member, 0), ParsedGrammarDollar[1].Member)
		}
	case 74:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:632
		{
			ParsedGrammarVAL.MemberList = append(ParsedGrammarDollar[1].MemberList, ParsedGrammarDollar[3].Member)
		}
	case 75:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:638
		{
			ParsedGrammarVAL.Member = Member{Identifier: ParsedGrammarDollar[1].String, ExprType: "A1TC_UNIVERVAL", MetaType: "AMT_VALUE", Value: ParsedGrammarDollar[3].Int64}
		}
	case 76:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:647
		{
			ParsedGrammarVAL.MemberList = append(make([]Member, 0), ParsedGrammarDollar[1].Member)
		}
	case 77:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:650
		{
			ParsedGrammarVAL.MemberList = append(ParsedGrammarDollar[1].MemberList, ParsedGrammarDollar[3].Member)
		}
	case 78:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:656
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[2].Member
			ParsedGrammarVAL.Member.Identifier = ParsedGrammarDollar[1].String
		}
	case 79:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:660
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 80:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:667
		{
			ParsedGrammarVAL.Member = Member{Identifier: "", ExprType: ParsedGrammarDollar[1].String, MetaType: "ASN_TYPE"}
		}
	case 81:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:673
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 82:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:673
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 83:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:678
		{
			ParsedGrammarVAL.MemberList = []Member{}
		}
	case 84:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:679
		{
			ParsedGrammarVAL.MemberList = ParsedGrammarDollar[1].MemberList
		}
	case 85:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:682
		{
			ParsedGrammarVAL.MemberList = append(make([]Member, 0), ParsedGrammarDollar[1].Member)
		}
	case 86:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:685
		{
			ParsedGrammarVAL.MemberList = append(ParsedGrammarDollar[1].MemberList, ParsedGrammarDollar[3].Member)
		}
	case 87:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:691
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[2].Member
			ParsedGrammarVAL.Member.Identifier = ParsedGrammarDollar[1].String
			ParsedGrammarVAL.Member.Marker = CopyMarker(ParsedGrammarDollar[3].Marker)
		}
	case 88:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:696
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[2].Member
			ParsedGrammarVAL.Member.Identifier = ParsedGrammarDollar[1].String
			ParsedGrammarVAL.Member.Marker = CopyMarker(ParsedGrammarDollar[3].Marker)
		}
	case 89:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:701
		{
			ParsedGrammarVAL.Member = ParsedGrammarDollar[1].Member
		}
	case 90:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-0 : ParsedGrammarpt+1]
//line asnparser/asn.y:707
		{
			ParsedGrammarVAL.Constraint = Constraint{}
		}
	case 91:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:708
		{
			ParsedGrammarVAL.Constraint = ParsedGrammarDollar[1].Constraint
		}
	case 92:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:720
		{
			ParsedGrammarVAL.Constraint = ParsedGrammarDollar[2].Constraint
		}
	case 93:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-7 : ParsedGrammarpt+1]
//line asnparser/asn.y:723
		{
			ParsedGrammarVAL.Constraint = Constraint{}
			ParsedGrammarVAL.Constraint.Type = "REAL_WITH_COMPONENTS"
			for i := 0; i < len(ParsedGrammarDollar[5].MemberList); i++ {
				constraint := ParsedGrammarDollar[5].MemberList[i]
				if constraint.Identifier == "mantissa" {
					ParsedGrammarVAL.Constraint.Min = constraint.Constraints.Min
					ParsedGrammarVAL.Constraint.Max = constraint.Constraints.Max
				} else if constraint.Identifier == "base" {
					ParsedGrammarVAL.Constraint.Base = constraint.Constraints.Value
				} else if constraint.Identifier == "exponent" {
					ParsedGrammarVAL.Constraint.Exponent = constraint.Constraints.Value
				}
			}
		}
	case 94:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:741
		{
			ParsedGrammarVAL.Constraint = Constraint{
				Type:  "SIZE_FIXED",
				Value: ParsedGrammarDollar[3].Int64,
			}
		}
	case 95:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-6 : ParsedGrammarpt+1]
//line asnparser/asn.y:747
		{
			ParsedGrammarVAL.Constraint = Constraint{
				Type: "SIZE_RANG",
				Min:  ParsedGrammarDollar[3].Int64,
				Max:  ParsedGrammarDollar[5].Int64,
			}
		}
	case 96:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-6 : ParsedGrammarpt+1]
//line asnparser/asn.y:754
		{
			ParsedGrammarVAL.Constraint = Constraint{
				Type:  "SIZE_FIXED_AND_EXT",
				Value: ParsedGrammarDollar[3].Int64,
			}
		}
	case 97:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-8 : ParsedGrammarpt+1]
//line asnparser/asn.y:760
		{
			ParsedGrammarVAL.Constraint = Constraint{
				Type: "SIZE_RANG_AND_EXT",
				Min:  ParsedGrammarDollar[3].Int64,
				Max:  ParsedGrammarDollar[5].Int64,
			}
		}
	case 98:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-5 : ParsedGrammarpt+1]
//line asnparser/asn.y:767
		{
			ParsedGrammarVAL.Constraint = Constraint{
				Type: "SIZE_RANG_AND_EXT",
				Min:  ParsedGrammarDollar[1].Int64,
				Max:  ParsedGrammarDollar[3].Int64,
			}
		}
	case 99:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:774
		{
			ParsedGrammarVAL.Constraint = Constraint{
				Type: "SIZE_RANG",
				Min:  ParsedGrammarDollar[1].Int64,
				Max:  ParsedGrammarDollar[3].Int64,
			}
		}
	case 100:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:784
		{
			ParsedGrammarVAL.MemberList = append(make(MemberList, 0), ParsedGrammarDollar[1].Member)
		}
	case 101:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-3 : ParsedGrammarpt+1]
//line asnparser/asn.y:787
		{
			ParsedGrammarVAL.MemberList = append(ParsedGrammarDollar[1].MemberList, ParsedGrammarDollar[3].Member)
		}
	case 102:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:793
		{
			ParsedGrammarVAL.Member = Member{}
			ParsedGrammarVAL.Member.Identifier = ParsedGrammarDollar[1].String
			ParsedGrammarVAL.Member.Constraints = CopyConstraint(ParsedGrammarDollar[3].Constraint)
		}
	case 103:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-4 : ParsedGrammarpt+1]
//line asnparser/asn.y:798
		{
			ParsedGrammarVAL.Member = Member{}
			ParsedGrammarVAL.Member.Identifier = ParsedGrammarDollar[1].String
			ParsedGrammarVAL.Member.Constraints = &Constraint{
				Type:  "SIZE_FIXED",
				Value: ParsedGrammarDollar[3].Int64,
			}
		}
	case 104:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:810
		{
			ParsedGrammarVAL.Member = Member{Identifier: "...", ExprType: "A1TC_EXTENSIBLE", MetaType: "AMT_TYPE"}
		}
	case 105:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:816
		{
			ParsedGrammarVAL.String = "BOOLEAN"
		}
	case 106:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:817
		{
			ParsedGrammarVAL.String = "NULL"
		}
	case 107:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:818
		{
			ParsedGrammarVAL.String = "REAL"
		}
	case 108:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:819
		{
			ParsedGrammarVAL.String = "OCTET_STRING"
		}
	case 109:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:820
		{
			ParsedGrammarVAL.String = "OBJECT_IDENTIFIER"
		}
	case 110:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:821
		{
			ParsedGrammarVAL.String = "RELATIVE_OID"
		}
	case 111:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:822
		{
			ParsedGrammarVAL.String = "EXTERNAL"
		}
	case 112:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:823
		{
			ParsedGrammarVAL.String = "EMBEDDED_PDV"
		}
	case 113:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:824
		{
			ParsedGrammarVAL.String = "CHARACTER_STRING"
		}
	case 114:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:825
		{
			ParsedGrammarVAL.String = "UTCTime"
		}
	case 115:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:826
		{
			ParsedGrammarVAL.String = "GeneralizedTime"
		}
	case 116:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:827
		{
			ParsedGrammarVAL.String = ParsedGrammarDollar[1].String
		}
	case 117:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:828
		{
			ParsedGrammarVAL.String = ParsedGrammarDollar[1].String
		}
	case 118:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:832
		{
			ParsedGrammarVAL.String = "BMPString"
		}
	case 119:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:833
		{
			ParsedGrammarVAL.String = "GeneralString"
		}
	case 120:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:834
		{
			ParsedGrammarVAL.String = "GraphicString"
		}
	case 121:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:835
		{
			ParsedGrammarVAL.String = "IA5String"
		}
	case 122:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:836
		{
			ParsedGrammarVAL.String = "ISO646String"
		}
	case 123:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:837
		{
			ParsedGrammarVAL.String = "NumericString"
		}
	case 124:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:838
		{
			ParsedGrammarVAL.String = "PrintableString"
		}
	case 125:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:839
		{
			ParsedGrammarVAL.String = "T61String"
		}
	case 126:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:840
		{
			ParsedGrammarVAL.String = "TeletexString"
		}
	case 127:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:841
		{
			ParsedGrammarVAL.String = "UniversalString"
		}
	case 128:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:842
		{
			ParsedGrammarVAL.String = "UTF8String"
		}
	case 129:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:843
		{
			ParsedGrammarVAL.String = "VideotexString"
		}
	case 130:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:844
		{
			ParsedGrammarVAL.String = "VisibleString"
		}
	case 131:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:845
		{
			ParsedGrammarVAL.String = "ObjectDescriptor"
		}
	case 132:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:853
		{
			ParsedGrammarVAL.String = "INTEGER"
		}
	case 133:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-1 : ParsedGrammarpt+1]
//line asnparser/asn.y:854
		{
			ParsedGrammarVAL.String = "ENUMERATED"
		}
	case 134:
		ParsedGrammarDollar = ParsedGrammarS[ParsedGrammarpt-2 : ParsedGrammarpt+1]
//line asnparser/asn.y:855
		{
			ParsedGrammarVAL.String = "BIT_STRING"
		}
	}
	goto ParsedGrammarstack /* stack new state and value */
}
